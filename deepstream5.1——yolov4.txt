deepstream运行框架搭建###################################################################################
1.安装deepstream所需要的运行环境
$ sudo apt install \
libssl1.0.0 \
libgstreamer1.0-0 \
gstreamer1.0-tools \
gstreamer1.0-plugins-good \
gstreamer1.0-plugins-bad \
gstreamer1.0-plugins-ugly \
gstreamer1.0-libav \
libgstrtspserver-1.0-0 \
libjansson4

2.安装nvidia驱动
下载nvidia460.32的驱动，安装包网址如下：
https://www.nvidia.com/en-us/drivers/unix/linux-amd64-display-archive/
提供本地安装包见文件夹。
当前目录下运行如下指令：
$chmod 755 NVIDIA-Linux-x86_64-460.32.03.run
$sudo ./NVIDIA-Linux-x86_64-460.32.03.run
提示：安装过程中可能出错，缺少gcc和make
可运行下面指令进行安装：
sudo apt-get install gcc
sudo apt-get install make
可利用指令查看驱动是否安装：nvidia-smi
（注释：在后边用deb安装cuda时，nvidia驱动会被覆盖替换版本，如果出现不兼容情况，可重新运行上述指令安装上述版本驱动）

3.安装cuda11.1以及cudnn8.1.33
deb安装cuda11.1
wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-ubuntu1804.pin
sudo mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600
wget https://developer.download.nvidia.com/compute/cuda/11.1.0/local_installers/cuda-repo-ubuntu1804-11-1-local_11.1.0-455.23.05-1_amd64.deb
sudo dpkg -i cuda-repo-ubuntu1804-11-1-local_11.1.0-455.23.05-1_amd64.deb
sudo apt-key add /var/cuda-repo-ubuntu1804-11-1-local/7fa2af80.pub
sudo apt-get update
sudo apt-get -y install cuda

tar安装cudnn8.1.33
（建议安装7.6.5，8.0.5貌似也能够兼容暂时还没有尝试）
sudo cp cuda/include/cudnn.h /usr/local/cuda/include
sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64
sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*
运行指令：
sudo gedit ~/.bashrc
在文件最后一行加入cuda路径
export PATH=/usr/local/cuda-11.1/bin:$PATH
export LD_LIBRARY_PATH=/usr/local/cuda-11.1/lib64:$LD_LIBRARY_PATH
使刚才的配置生效。
source ~/.bashrc
可利用指令查看cuda是否安装：nvcc -V
sudo apt-get --purge remove nvidia*


切换python版本
可利用指令：python --version 查看默认版本
python3 --version 或者python2 --version 查看python2或3安装版本
需要下载python3.6，并切换到系统默认版本
sudo apt install python3 已经安装python3.6版本略过此项
sudo apt-get install python3-pip
pip3 -V 查看pip版本, 版本较低进行升级 python3 -m pip install --upgrade pip
创建软连接
sudo rm -rf /usr/bin/python
sudo ln -s /usr/bin/python3.6 /usr/bin/python

4.安装tensorrt7
deb安装：
os="ubuntu1x04"
tag="cudax.x-trt7.x.x.x-ga-yyyymmdd"
sudo dpkg -i nv-tensorrt-repo-${os}-${tag}_1-1_amd64.deb
sudo apt-key add /var/nv-tensorrt-repo-${tag}/7fa2af80.pub
sudo apt-get update
sudo apt-get install tensorrt
sudo apt-get install python3-libnvinfer-dev
sudo apt-get install python3-libnvinfer
sudo apt-get install onnx-graphsurgeon

注释：tar安装需要
       sudo gedit ~/.bashrc
       在文件最后一行加入cuda路径
       export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/zzmj/TensorRt-*.*.*.*/lib
       使刚才的配置生效。
       source ~/.bashrc

5.安装librdkafka
git clone https://github.com/edenhill/librdkafka.git
cd librdkafka
git reset --hard 7101c2310341ab3f4675fc565f64f0967e135a6a
./configure
make
（注释：make时如果出现fatal error: zlib.h: No such file or directory
运行如下指令：
cd /tmp
wget http://www.zlib.net/zlib-1.2.11.tar.gz
tar zxvf zlib-1.2.11.tar.gz
cd zlib-1.2.11
./configure
make test
make install
构建共享库
make clean
./configure --shared
make test
make install
cp zutil.h /usr/local/include
cp zutil.c /usr/local/include
）
sudo make install

sudo mkdir -p /opt/nvidia/deepstream/deepstream-5.1/lib
sudo cp /usr/local/lib/librdkafka* /opt/nvidia/deepstream/deepstream-5.1/lib

6.安装deepstream5.1 SDK
sudo apt-get install ./deepstream-5.1_5.1.0-1_amd64.deb
到此deepstream安装完毕
在路径：/opt/nvidia/deepstream/deepstream-5.1/samples/configs/deepstream-app路径下运行demo
deepstream-app -c <path_to_config_file>

附录：有时需要修改文件夹修改权限：sudo chown -R zzmj <所要修改文件>
yolov4框架在deepstream框架下运行###########################################################################################
1.首先终端运行如下指令：
git clone https://github.com/Tianxiaomo/pytorch-YOLOv4.git
cd pytorch-YOLOv4

2，安装所需要的python库
pytorch <= 1.4安装：
pip3 install torch==1.4.0 -i https://mirrors.aliyun.com/pypi/simple
安装cmake：
sudo apt install cmake
onnx安装：
安装依赖
sudo apt-get install protobuf-compiler libprotoc-dev
export CMAKE_ARGS="-DONNX_USE_PROTOBUF_SHARED_LIBS=ON"
pip3 install onnx   python版本为3.6 onnx==1.9.0， onnxruntime==1.3.0
onnxruntime安装
pip3 install onnxruntime
opencv-python安装

onnxruntime
安装不成功： ModuleNotFoundError: No module named 'skbuild'
pip3 install scikit-build

3.生成onnx文件
在pytorch-YOLOv4文件夹中放入将下载好的yolov4.cfg 和yolov4.weights
在pytorch-YOLOv4文件夹下运行：
python demo_darknet2onnx.py <cfgFile> <weightFile> <imageFile> <batchSize>
第三个参数233.png是一张用来测试的图，随便找一张你的模型训练集的图片就行。第四个参数是batchsize，0代表这是dynamic batchsize。
例：python demo_darknet2onnx.py yolov4.cfg yolov4.weights ./data/dog.jpg 1

4将生成的onnx文件转化为engine文件
从home里面的TensorRT-7.0.0.11文件夹里面找到trtexec文件：/home/zzmj/TensorRT-7.0.0.11/targets/x86_64-linux-gnu/bin
如果deb安装的话文件在路径：/usr/src/tensorrt/bin/trtexec

 ../../trtexec --onnx=yolov4_1_3_512_320.onnx --explicitBatch --saveEngine=yolov4_1_3_320_512_fp16.engine --workspace=4096 --fp16

5.使用TRT模型
git clone https://github.com/NVIDIA-AI-IOT/yolov4_deepstream
cd yolov4_deepstream/
里面有一个deepstream_yolov4/的文件夹，把这个deepstream_yolov4/文件夹复制到目标设备上的这个位置：/opt/nvidia/deepstream/deepstream-5.0/sources/，
一定要放到这个位置，否则编译失败。
需要修改：
deepstream_app_config_yoloV4.txt中的：
model-engine-file = 你生成的engine文件
labelfile-path = labels.txt

config_infer_primary_yoloV4.txt中的：
model-engine-file=<onnx_engine_file>

labels.txt中的标签名字，一行一个标签名，顺序要按照训练时的标签顺序。

6.在配置文件路径下运行：

deepstream-app -c deepstream_app_config_yoloV4.txt


cmake  \
-D CMAKE_BUILD_TYPE=RELEASE  \
-D CMAKE_INSTALL_PREFIX=/usr/local/  \
-D OPENCV_EXTRA_MODULES_PATH=../opencv_contrib-4.5.1/modules  \
-D OPENCV_GENERATE_PKGCONFIG=ON  \
-D OPENCV_ENABLE_NONFREE=ON  \
-D CUDA_CUDA_LIBRARY=/usr/lib/x86_64-linux-gnu/libcuda.so  \
-D CUDA_ARCH_BIN='7.5'  \
-D CUDA_FAST_MATH=1  \
-D WITH_CUDA=ON  \
-D WITH_TBB=ON  \
-D WITH_V4L=ON  \
-D WITH_OPENGL=ON  \
-D WITH_CUBLAS=1  \
-D WITH_NVCUVID=ON  \
-D WITH_GSTREAMER=ON  \
-D WITH_FFMPEG=ON  \
-D WITH_GTK=ON  \
-D INSTALL_C_EXAMPLES=OFF  \
-D ENABLE_FAST_MATH=1  \
..

